#include "display_character_map.hpp"
#include "map.hpp"

nsRedBlackTree::cRedBlackTree<wchar_t, eDisplayCharacter, 110> DisplayCharacterMap =
    {
        {' ', eDisplayCharacter::SPACE},
        {'!', eDisplayCharacter::EXCLAMATION_MARK},
        {'"', eDisplayCharacter::DOUBLE_QUOTE},
        {'#', eDisplayCharacter::HASH},
        {'$', eDisplayCharacter::DOLLAR},
        {'%', eDisplayCharacter::PERCENT},
        {'&', eDisplayCharacter::AMPERSAND},
        {'\'', eDisplayCharacter::APOSTROPHE},
        {'(', eDisplayCharacter::LEFT_PARENTHESIS},
        {')', eDisplayCharacter::RIGHT_PARENTHESIS},
        {'*', eDisplayCharacter::ASTERISK},
        {'+', eDisplayCharacter::PLUS},
        {',', eDisplayCharacter::COMMA},
        {'-', eDisplayCharacter::HYPHEN},
        {'.', eDisplayCharacter::PERIOD},
        {'/', eDisplayCharacter::SLASH},
        {'0', eDisplayCharacter::ZERO},
        {'1', eDisplayCharacter::ONE},
        {'2', eDisplayCharacter::TWO},
        {'3', eDisplayCharacter::THREE},
        {'4', eDisplayCharacter::FOUR},
        {'5', eDisplayCharacter::FIVE},
        {'6', eDisplayCharacter::SIX},
        {'7', eDisplayCharacter::SEVEN},
        {'8', eDisplayCharacter::EIGHT},
        {'9', eDisplayCharacter::NINE},
        {':', eDisplayCharacter::COLON},
        {';', eDisplayCharacter::SEMICOLON},
        {'<', eDisplayCharacter::LESS_THAN},
        {'=', eDisplayCharacter::EQUALS},
        {'>', eDisplayCharacter::GREATER_THAN},
        {'?', eDisplayCharacter::QUESTION_MARK},
        {'@', eDisplayCharacter::AT_SIGN},
        {'A', eDisplayCharacter::A},
        {'B', eDisplayCharacter::B},
        {'C', eDisplayCharacter::C},
        {'D', eDisplayCharacter::D},
        {'E', eDisplayCharacter::E},
        {'F', eDisplayCharacter::F},
        {'G', eDisplayCharacter::G},
        {'H', eDisplayCharacter::H},
        {'I', eDisplayCharacter::I},
        {'J', eDisplayCharacter::J},
        {'K', eDisplayCharacter::K},
        {'L', eDisplayCharacter::L},
        {'M', eDisplayCharacter::M},
        {'N', eDisplayCharacter::N},
        {'O', eDisplayCharacter::O},
        {'P', eDisplayCharacter::P},
        {'Q', eDisplayCharacter::Q},
        {'R', eDisplayCharacter::R},
        {'S', eDisplayCharacter::S},
        {'T', eDisplayCharacter::T},
        {'U', eDisplayCharacter::U},
        {'V', eDisplayCharacter::V},
        {'W', eDisplayCharacter::W},
        {'X', eDisplayCharacter::X},
        {'Y', eDisplayCharacter::Y},
        {'Z', eDisplayCharacter::Z},
        {'[', eDisplayCharacter::LEFT_BRACKET},
        {L'¥', eDisplayCharacter::YEN},
        {']', eDisplayCharacter::RIGHT_BRACKET},
        {'^', eDisplayCharacter::CARET},
        {'_', eDisplayCharacter::UNDERSCORE},
        {'`', eDisplayCharacter::BACKTICK},
        {'a', eDisplayCharacter::a},
        {'b', eDisplayCharacter::b},
        {'c', eDisplayCharacter::c},
        {'d', eDisplayCharacter::d},
        {'e', eDisplayCharacter::e},
        {'f', eDisplayCharacter::f},
        {'g', eDisplayCharacter::g},
        {'h', eDisplayCharacter::h},
        {'i', eDisplayCharacter::i},
        {'j', eDisplayCharacter::j},
        {'k', eDisplayCharacter::k},
        {'l', eDisplayCharacter::l},
        {'m', eDisplayCharacter::m},
        {'n', eDisplayCharacter::n},
        {'o', eDisplayCharacter::o},
        {'p', eDisplayCharacter::p},
        {'q', eDisplayCharacter::q},
        {'r', eDisplayCharacter::r},
        {'s', eDisplayCharacter::s},
        {'t', eDisplayCharacter::t},
        {'u', eDisplayCharacter::u},
        {'v', eDisplayCharacter::v},
        {'w', eDisplayCharacter::w},
        {'x', eDisplayCharacter::x},
        {'y', eDisplayCharacter::y},
        {'z', eDisplayCharacter::z},
        {'{', eDisplayCharacter::LEFT_BRACE},
        {'|', eDisplayCharacter::PIPE},
        {'}', eDisplayCharacter::RIGHT_BRACE},
        {'>', eDisplayCharacter::RIGHT_ARROW},
        {'<', eDisplayCharacter::LEFT_ARROW},
        {L'ε', eDisplayCharacter::epsilon},
        {L'°', eDisplayCharacter::DEGREE},
        {L'α', eDisplayCharacter::alpha},
        {L'ä', eDisplayCharacter::a_umlaut},
        {L'β', eDisplayCharacter::beta},
        {L'σ', eDisplayCharacter::sigma},
        {L'ρ', eDisplayCharacter::rho},
        {L'θ', eDisplayCharacter::theta},
        {L'Θ', eDisplayCharacter::THETA},
        {L'Ω', eDisplayCharacter::OMEGA},
        {L'Σ', eDisplayCharacter::SIGMA},
        {L'π', eDisplayCharacter::pi},
        {L'÷', eDisplayCharacter::DIVISION},
        {L'█', eDisplayCharacter::FULL},
};

bool DisplayCharacterExists(const wchar_t arg_character)
{
  eDisplayCharacter character = eDisplayCharacter::FULL;
  return DisplayCharacterMap.Search(arg_character, character);
}

eDisplayCharacter GetDisplayCharacter(const wchar_t arg_character)
{
  eDisplayCharacter result = eDisplayCharacter::QUESTION_MARK;
  (void)DisplayCharacterMap.Search(arg_character, result);
  return result;
}
